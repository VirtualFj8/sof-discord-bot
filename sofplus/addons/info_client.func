//****************************
// Export client info to file
//****************************

function info_client_init( )
{
  //alias !info_client "sp_sc_func_load_file sofplus/addons/info_client.func"

  sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_map_begin "info_client_map_begin"
  sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_map_end "upload_match_on_map_end"

  sp_sc_on_change paused info_client_paused_changed
  
  sp_sc_func_exec info_client_map_begin
}

function info_client_map_begin()
{
  set _spf_upload_pending 0
  set _spf_upload_slot -1

  set _spf_in_intermission 0
  set _spf_is_paused 0
  set _spf_paused_time 0
  set _spf_paused_time_start 0
  set _spf_gametime_start 0

  sp_sc_info_time
  sp_sc_cvar_copy _spf_gametime_start _sp_sc_info_time_sec 

}

function info_client_paused_changed(~name)
{
  sp_sc_flow_if number cvar paused != val 0
  {
    //paused applied - record timestamp
    set _spf_is_paused 1
    sp_sc_info_time
    sp_sc_cvar_copy _spf_paused_time_start _sp_sc_info_time_sec
  }
  else
  {
    sp_sc_flow_if number cvar _spf_is_paused == val 1
    {
      //calc time spent paused, subtract from gametime.
      set _spf_is_paused 0
      sp_sc_info_time
      sp_sc_cvar_math_sub _sp_sc_info_time_sec #_spf_paused_time_start

      sp_sc_cvar_math_add _spf_paused_time #_sp_sc_info_time_sec
      
    }
  }
}

function info_client( )
{
  set ~slot 0
  sp_sc_flow_while number cvar ~slot < cvar maxclients
  {
    zero _sp_sv_info_client_ip
    sp_sc_cvar_sset ~file info_client/player_$~slot .cfg

    sp_sv_info_client #~slot
    sp_sc_flow_if text cvar _sp_sv_info_client_ip != val ""
    {
      sp_sc_cvar_save #~file _sp_sv_info_client_*
    }
    else
    {
      // Delete file if it exist
      sp_sc_file_find ~f sofplus/data/$~file filesystem file
      sp_sc_flow_if number cvar ~f_0 == val 1
      {
        sp_sc_cvar_save #~file ""
      }
    }

    add ~slot 1
  }
}

function info_server(~discord_mode, ~discord_slot, ~discord_msg, ~end_reason, ~winner, ~capping_slot)
{
  sp_sc_cvar_save info_server/server.cfg hostname ctf_loops _sp_sv_info_map_current _sp_sv_info_flag_* _sp_sv_info_num_* ~discord_mode ~discord_slot ~discord_msg ~end_reason ~winner ~capping_slot
}



function upload_match_on_map_end()
{
   //Figure out how the match ended (fraglimit/timelimit/flaglimit)
  
  set ~i 0
  set ~max_time 0
  set ~max_frags 0
  sp_sc_flow_while number cvar ~i < cvar maxclients
  {
    sp_sv_info_client $~i
    sp_sc_flow_if text cvar _sp_sv_info_client_ip != val ""
    {
      sp_sc_flow_if number cvar _sp_sv_info_client_frames_total > cvar ~max_time
      {
        sp_sc_cvar_copy ~max_time _sp_sv_info_client_frames_total
        
      }
      sp_sc_flow_if number cvar _sp_sv_info_client_frags > cvar ~max_frags
      {
        sp_sc_cvar_copy ~max_frags _sp_sv_info_client_frags
      }
    }
    

    add ~i 1
  }

  
  sp_sc_flow_if number cvar _sp_sv_timelimit_mod == val 0
  {
    //counting starts from player that has been in the server the longest

    
    sp_sc_cvar_copy ~gametime ~max_time
    sp_sc_cvar_math_div ~gametime 10
    
  }
  else
  {
    sp_sc_info_time
    sp_sc_cvar_math_sub _sp_sc_info_time_sec #_spf_game_time_start
    sp_sc_cvar_copy ~gametime _sp_sc_info_time_sec

    sp_sc_flow_if number cvar _sp_sv_timelimit_mod == val 2
    {
      //factor in paused deduction
      sp_sc_cvar_math_sub ~gametime #_spf_paused_time
    }
  }
  
  sp_sc_cvar_copy ~timelimit timelimit 
  sp_sc_cvar_math_mul ~timelimit 60

  ~max_time
  ~max_frags
  ~gametime
  ~timelimit

  set ~end_reason "unknown"
  sp_sc_flow_if number cvar timelimit > val 0
  {
    sp_sc_flow_if number cvar ~gametime >= cvar ~timelimit
    {
      set ~end_reason "timelimit"
    }
  }
  else
  {
    //fraglimit or flaglimit
    sp_sc_flow_if number cvar fraglimit > val 0
    {
      sp_sc_flow_if number cvar ~max_frags >= cvar fraglimit
      {
        set ~end_reason "fraglimit"
      }
    }
    else
    {
      sp_sc_flow_if number cvar deathmatch == val 4
      {
        //share flaglimit to the discord script (hidden data)
        set ~end_reason "flaglimit"
        sp_sc_cvar_substr ~blue_flag_state _sp_sv_info_flag_blue 0 1
      
        sp_sc_flow_if text cvar ~blue_flag_state == val "r"
        {
          set ~winner "blue"
          sp_sc_cvar_substr ~capping_slot _sp_sv_info_flag_blue 1 2
        }
        else
        {
          set ~winner "red"
          sp_sc_cvar_substr ~capping_slot _sp_sv_info_flag_red 1 2
        }
      }
    }
  }

  //slight delay
  sset ~cmd sp_sc_func_exec !upload_match_delayed #_spf_upload_slot #~end_reason #~winner #~capping_slot
  sp_sc_timer 150 #~cmd
  
}

function upload_match_delayed(~slot, ~end_reason, ~winner, ~capping_slot)
{
  // Mark that we're in intermission so commands can detect it
  set _spf_in_intermission 1

 


  // On map end perform upload if scheduled for the map
  sp_sc_flow_if number cvar _spf_upload_pending == val 1
  {

    sp_sc_func_exec info_client
    sp_sc_func_exec info_server ".upload_match" #_spf_upload_slot "" #~end_reason #~winner #~capping_slot

    
    sset ~msg "%04Scoreboard uploaded to %1Fhistoric-public-matches %04SoF discord channel. Type %03.discord %04for discord link." 
    sp_sc_cvar_unescape ~msg ~msg
    sp_sv_print_broadcast #~msg

  }
  else
  {
    // No upload was scheduled during the map; give players a last chance to request it
    sset ~msg "%04No discord-upload scheduled for this map. Type %03.upload_match %04now to upload the scoreboard."
    sp_sc_cvar_unescape ~msg ~msg
    sp_sv_print_broadcast #~msg
  }
}

function info_client_signal_discord(~signal, ~slot, ~extramsg)
{
  set ~count 1
  set ~extramsg
  sp_sc_flow_while number cvar ~count <= val #~0
  {
    sp_sc_cvar_copy ~val ~$~count
    sset ~extramsg #~extramsg #~val
    add ~count 1
  }

  sp_sc_func_exec info_client
  sp_sc_func_exec info_server #~signal $~slot #~extramsg

  sp_sv_print_client #~slot " OK."
  sp_sv_print_client #~slot " The message has been sent to  Discord."
}


//We can never get the accurate number of flags captured, _sp_sv_info_num_flag_blue doesnt register last cap
function .upload_match(~slot, *)
{

  // Use a simple per-map flag variable; it will be initialised on map begin and cleared on map end
  sp_sc_flow_if number cvar _spf_upload_pending == val 1
  {
    set ~msg "%02An upload for this map is already scheduled; only one upload per map is allowed."
    sp_sc_cvar_unescape ~msg ~msg
    sp_sv_print_client #~slot #~msg
  }
  else
  {
    // If we're already in intermission, apply the upload immediately instead of scheduling it.
    sp_sc_flow_if number cvar _spf_in_intermission == val 1
    {
      // Gather client info and trigger the upload flow immediately
      sp_sv_info_client #~slot
      sp_sc_func_exec info_client
      sp_sc_func_exec info_server ".upload_match" #~slot ""

      sset ~msg "%04Scoreboard Screenshot uploaded to %1Fhistoric-public-matches %04SoF discord channel. Type %03.discord %04for discord link."
      sp_sc_cvar_unescape ~msg ~msg
      sp_sv_print_broadcast #~msg

      // No per-map pending state is set because upload completed instantly
    }
    else
    {
      set _spf_upload_pending 1
      set _spf_upload_slot #~slot

      sp_sv_info_client #~slot
    
      sset ~msg #_sp_sv_info_client_name "%04issued %03.upload_match %04command; A screenshot of the scoreboard will be uploaded to Discord %1Fhistoric-public-matches %04channel when this ends. Issue %03.cancel_upload %04to stop this."
      sp_sc_cvar_unescape ~msg ~msg
      sp_sv_print_broadcast #~msg
    }
  }
}

function .cancel_upload(~slot)
{
  sp_sc_flow_if number cvar _spf_upload_pending == val 1
  {
    // Only the player who scheduled the upload can cancel it
    sp_sc_flow_if number cvar _spf_upload_slot == val #~slot
    {
      // Announce who cancelled
      sp_sv_info_client #~slot
      sset ~msg #_sp_sv_info_client_name "%04cancelled the scheduled upload for this map."
      sp_sc_cvar_unescape ~msg ~msg
      sp_sv_print_broadcast #~msg

      // Clear pending state
      set _spf_upload_pending 0
      set _spf_upload_slot -1

    }
    else
    {
      set ~msg "%02You didn't schedule the upload; only the uploader can cancel."
      sp_sc_cvar_unescape ~msg ~msg
      sp_sv_print_client #~slot #~msg
    }
  }
  else
  {
    set ~msg "%02There is no upload scheduled for this map."
    sp_sc_cvar_unescape ~msg ~msg
    sp_sv_print_client #~slot #~msg
  }
}

function .wantplay(~slot, *)
{
  sp_sc_func_exec info_client_signal_discord ".wantplay" $~slot #~extramsg
}

function .wantmatch(~slot, *)
{
  sp_sc_func_exec info_client_signal_discord ".wantmatch" $~slot #~extramsg
}

function .match1(~slot, *)
{
  sp_sc_func_exec info_client_signal_discord ".match1" $~slot #~extramsg
}

function .match2(~slot, *)
{
  sp_sc_func_exec info_client_signal_discord ".match2" $~slot #~extramsg
}

function .want1(~slot, *)
{
  sp_sc_func_exec info_client_signal_discord ".want1" $~slot #~extramsg
}

function .want2(~slot, *)
{
  sp_sc_func_exec info_client_signal_discord ".want2" $~slot #~extramsg
}

function .discord(~slot)
{
  set ~msg "%04type %03condump discord %04in console (copy from User/discord.txt). Discord link: https://discord.com/channels/690023187274399779/1405167363531341955"
  sp_sc_cvar_unescape ~msg ~msg
  sp_sv_print_broadcast #~msg
}
