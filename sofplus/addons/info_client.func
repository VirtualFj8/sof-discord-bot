//****************************
// Export client info to file
//****************************

function info_client_init( )
{
  //alias !info_client "sp_sc_func_load_file sofplus/addons/info_client.func"

  sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_map_begin "info_client_map_begin"
  sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_map_end "upload_match_on_map_end"
  
  sp_sc_func_exec info_client_map_begin
}

function info_client_map_begin()
{
  set _spf_upload_pending 0
  set _spf_upload_slot -1
  // clear intermission flag at map begin
  set _spf_in_intermission 0

  
}

function info_client( )
{
  set ~slot 0
  sp_sc_flow_while number cvar ~slot < cvar maxclients
  {
    zero _sp_sv_info_client_ip
    sp_sc_cvar_sset ~file info_client/player_$~slot .cfg

    sp_sv_info_client #~slot
    sp_sc_flow_if text cvar _sp_sv_info_client_ip != val ""
    {
      sp_sc_cvar_save #~file _sp_sv_info_client_*
    }
    else
    {
      // Delete file if it exist
      sp_sc_file_find ~f sofplus/data/$~file filesystem file
      sp_sc_flow_if number cvar ~f_0 == val 1
      {
        sp_sc_cvar_save #~file ""
      }
    }

    add ~slot 1
  }
}

function info_server(~discord_mode, ~discord_slot, ~discord_msg)
{
  sp_sc_cvar_save info_server/server.cfg hostname _sp_sv_info_map_current _sp_sv_info_flag_* _sp_sv_info_num_* ~discord_mode ~discord_slot ~discord_msg
}

function .wantplay(~slot, *)
{
  set ~count 1
  set ~extramsg
  sp_sc_flow_while number cvar ~count <= val #~0
  {
    sp_sc_cvar_copy ~val ~$~count
    sset ~extramsg #~extramsg #~val
    add ~count 1
  }

  sp_sc_func_exec info_client
  sp_sc_func_exec info_server ".wantplay" $~slot #~extramsg

  sp_sv_print_client #~slot " OK."
  sp_sv_print_client #~slot " The message has been sent to  Discord."
}

function .wantmatch(~slot, *)
{
  set ~count 1
  set ~extramsg
  sp_sc_flow_while number cvar ~count <= val #~0
  {
    sp_sc_cvar_copy ~val ~$~count
    sset ~extramsg #~extramsg #~val
    add ~count 1
  }

  sp_sc_func_exec info_client
  sp_sc_func_exec info_server ".wantmatch" $~slot #~extramsg

  sp_sv_print_client #~slot " OK."
  sp_sv_print_client #~slot " The message has been sent to  Discord."
}

function .match1(~slot, *)
{
  set ~count 1
  set ~extramsg
  sp_sc_flow_while number cvar ~count <= val #~0
  {
    sp_sc_cvar_copy ~val ~$~count
    sset ~extramsg #~extramsg #~val
    add ~count 1
  }

  sp_sc_func_exec info_client
  sp_sc_func_exec info_server ".match1" $~slot #~extramsg

  sp_sv_print_client #~slot " OK."
  sp_sv_print_client #~slot " The message has been sent to  Discord."
}

function .match2(~slot, *)
{
  set ~count 1
  set ~extramsg
  sp_sc_flow_while number cvar ~count <= val #~0
  {
    sp_sc_cvar_copy ~val ~$~count
    sset ~extramsg #~extramsg #~val
    add ~count 1
  }

  sp_sc_func_exec info_client
  sp_sc_func_exec info_server ".match2" $~slot #~extramsg

  sp_sv_print_client #~slot " OK."
  sp_sv_print_client #~slot " The message has been sent to  Discord."
}

function .upload_match(~slot, *)
{

  // Use a simple per-map flag variable; it will be initialised on map begin and cleared on map end
  sp_sc_flow_if number cvar _spf_upload_pending == val 1
  {
    set ~msg "%02An upload for this map is already scheduled; only one upload per map is allowed."
    sp_sc_cvar_unescape ~msg ~msg
    sp_sv_print_client #~slot #~msg
  }
  else
  {
    // If we're already in intermission, apply the upload immediately instead of scheduling it.
    // Use our own toggle `_spf_in_intermission` (0/1) rather than `_sp_sv_intermission_end`.
    sp_sc_flow_if number cvar _spf_in_intermission == val 1
    {
      // Gather client info and trigger the upload flow immediately
      sp_sv_info_client #~slot
      sp_sc_func_exec info_client
      sp_sc_func_exec info_server ".upload_match" #~slot ""

      sset ~msg "%04Scoreboard Screenshot uploaded to %1Fhistoric-public-matches %04SoF discord channel. Type %03.discord %04for discord link."
      sp_sc_cvar_unescape ~msg ~msg
      sp_sv_print_broadcast #~msg

      // No per-map pending state is set because upload completed instantly
    }
    else
    {
      set _spf_upload_pending 1
      set _spf_upload_slot #~slot

      sp_sv_info_client #~slot
    
      sset ~msg #_sp_sv_info_client_name "%04issued %03.upload_match %04command; A screenshot of the scoreboard will be uploaded to Discord %1Fhistoric-public-matches %04channel when this ends. Issue %03.cancel_upload %04to stop this."
      sp_sc_cvar_unescape ~msg ~msg
      sp_sv_print_broadcast #~msg
    }
  }
}

function upload_match_on_map_end()
{
  // 1 and a half server ticks to ensure we have all flag caps/points.
  sset ~cmd sp_sc_func_exec upload_match_delayed #_spf_upload_slot
  sp_sc_timer 150 #~cmd
  
}

function upload_match_delayed(~slot)
{
  // Mark that we're in intermission so commands can detect it
  set _spf_in_intermission 1
  // On map end perform upload if scheduled for the map
  sp_sc_flow_if number cvar _spf_upload_pending == val 1
  {

    sp_sc_func_exec info_client
    sp_sc_func_exec info_server ".upload_match" #_spf_upload_slot ""

    
    sset ~msg "%04Scoreboard Screenshot uploaded to %1Fhistoric-public-matches %04SoF discord channel. Type %03.discord %04for discord link." 
    sp_sc_cvar_unescape ~msg ~msg
    sp_sv_print_broadcast #~msg

  }
  else
  {
    // No upload was scheduled during the map; give players a last chance to request it
    sset ~msg "%04No discord-upload scheduled for this map. Type %03.upload_match %04now to upload the scoreboard."
    sp_sc_cvar_unescape ~msg ~msg
    sp_sv_print_broadcast #~msg
  }
}

function .cancel_upload(~slot)
{
  sp_sc_flow_if number cvar _spf_upload_pending == val 1
  {
    // Only the player who scheduled the upload can cancel it
    sp_sc_flow_if number cvar _spf_upload_slot == val #~slot
    {
      // Announce who cancelled
      sp_sv_info_client #~slot
      sset ~msg #_sp_sv_info_client_name "%04cancelled the scheduled upload for this map."
      sp_sc_cvar_unescape ~msg ~msg
      sp_sv_print_broadcast #~msg

      // Clear pending state
      set _spf_upload_pending 0
      set _spf_upload_slot -1

    }
    else
    {
      set ~msg "%02You didn't schedule the upload; only the uploader can cancel."
      sp_sc_cvar_unescape ~msg ~msg
      sp_sv_print_client #~slot #~msg
    }
  }
  else
  {
    set ~msg "%02There is no upload scheduled for this map."
    sp_sc_cvar_unescape ~msg ~msg
    sp_sv_print_client #~slot #~msg
  }
}

function .want1(~slot, *)
{
  set ~count 1
  set ~extramsg
  sp_sc_flow_while number cvar ~count <= val #~0
  {
    sp_sc_cvar_copy ~val ~$~count
    sset ~extramsg #~extramsg #~val
    add ~count 1
  }

  sp_sc_func_exec info_client
  sp_sc_func_exec info_server ".want1" $~slot #~extramsg

  sp_sv_print_client #~slot " OK."
  sp_sv_print_client #~slot " The message has been sent to  Discord."
}

function .want2(~slot, *)
{
  set ~count 1
  set ~extramsg
  sp_sc_flow_while number cvar ~count <= val #~0
  {
    sp_sc_cvar_copy ~val ~$~count
    sset ~extramsg #~extramsg #~val
    add ~count 1
  }

  sp_sc_func_exec info_client
  sp_sc_func_exec info_server ".want2" $~slot #~extramsg

  sp_sv_print_client #~slot " OK."
  sp_sv_print_client #~slot " The message has been sent to  Discord."
}

function .discord(~slot)
{
  set ~msg "%04type %03condump discord %04in console (copy from User/discord.txt). Discord link: https://discord.com/channels/690023187274399779/1405167363531341955"
  sp_sc_cvar_unescape ~msg ~msg
  sp_sv_print_broadcast #~msg
}
